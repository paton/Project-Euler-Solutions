/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/


//////
////// Third iteration, even more efficient
//////

// TODO: Write a version that uses prime factorization


//////
////// Second iteration, more efficient
//////


var numberOfFactors = function(num) {
  var factors = 1,
      sqrtNum = Math.sqrt(num),
      factors = 0; // Start at 1 to include num

  // Calculate number of factors
  for (var i = 0; i <= sqrtNum; i++)
    if (num % i === 0) factors += 2;

  return factors;
}

var findNumWithNumFactors = function(numFactors) {
  var i = 2,
      triangleNum = 1;

  while (numberOfFactors(triangleNum) < numFactors) {
    triangleNum += i;
    i++;
  }

  return triangleNum;
}

console.log(findNumWithNumFactors(500));
// 76576500


////
///  First iteration, kinda shitty, not really working
////

var findHighlyDivisbleTriangleNum = function(upperBound) {
  var currentTriangleNum = 1,
      factors = [];

  // Find factors arrays
  for (var i = 2; i < upperBound; i++) {
    if (!factors[i]) factors[i] = 1;

    // Record multiples of i
    for (var j = i; j < upperBound; j += i) {
      if (!factors[j]) factors[j] = 1;
      factors[j]++
      if (factors[j] === 500) return j;
    }
  }

  return false;

}

console.log(findHighlyDivisbleTriangleNum(50000000));
// 43243200